import os
import traceback
import subprocess
from pathlib import Path

cache_path = Path('cache/tex').absolute()
if not cache_path.exists():
    cache_path.mkdir(parents=True)


async def tex2pic(equation, fmt='png', border=2, resolution=1000):
    packages = r'''
        \usepackage{amsmath}
        \usepackage{mathtools}
        \usepackage{amsfonts}
        \usepackage{amssymb}
        \usepackage{amsthm}
        \usepackage{siunitx}
        \usepackage{graphicx}
        \usepackage{pifont}
        \usepackage{xcolor}
        \usepackage{ulem}
    '''

    inline = r'''% latex file generated by tex2pic
        \documentclass[border={}pt]{{standalone}}
        {}
        \begin{{document}}
            $\displaystyle
                {}
            $
        \end{{document}}
    '''.format(border, packages, equation)

    multi_line = r'''% latex file generated by tex2pic
        \documentclass[border={}pt, varwidth=20cm]{{standalone}}
        {}
        \begin{{document}}
            \begin{{equation*}}
                {}
            \end{{equation*}}
        \end{{document}}
    '''.format(border, packages, equation)

    tmp_tex = cache_path / 'tmp.tex'
    tmp_pdf = cache_path / 'tmp.pdf'
    tmp_out = cache_path / ('tmp.' + fmt)

    try:
        with tmp_tex.open('w') as f:
            if r'\\' in equation:
                f.write(multi_line)
            else:
                f.write(inline)

        stdout = open(os.devnull, 'w')
        p_open = subprocess.Popen('pdflatex -interaction=nonstopmode -pdf %s' % tmp_tex,
                                shell=True, cwd=str(cache_path), stdout=stdout, stderr=stdout)
        p_open.wait()
        stdout.close()

        if p_open.returncode != 0:
            return ''

        formats = {'jpg': 'jpg', 'jpeg': 'jpg','png': 'png', 'tiff': 'tiff', 'ppm': ''}
        if fmt in formats.keys():
            convert_cmd = f'pdftoppm -r %d -%s %s > %s' % (resolution, formats[fmt], tmp_pdf, tmp_out)
            subprocess.check_call(convert_cmd, shell=True)

        return str(tmp_out)
    except:
        logger.debug(traceback.format_exc())
        return ''
